{
    "contents": [
        {
            "title" : "PBD",
            "description": [
                "論文「Position Based Dynamics」(PBD)の解説記事を書きました。アルゴリズムの実装だけでなく、数式やアルゴリズムの説明について学びながら解説しました。",
                "PBDは質点間に制約を与え、それを保持するように位置を直接変更して座標を更新する手法です。従来の力を加えて座標を更新する手法に比べて、直接座標を更新するため扱いやすく、比較的安定しているのでゲームなどによく使われる手法です。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_pbd.png",
                "link": {
                    "title": "[Unity] 論文を読んで紐物理を実装してみよう(PBD: Position Based Dynamics)",
                    "url": "https://zenn.dev/nrdev/articles/141dbc5774f666"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] 論文を読んで紐物理を実装してみよう(PBD: Position Based Dynamics)",
                    "url": "https://zenn.dev/nrdev/articles/141dbc5774f666"
                }
            ]
        },
        {
            "title" : "XPBD",
            "description": [
                "論文「XPBD: Position-Based Simulation of Compliant Constrained Dynamics」の解説記事を書きました。PBDで課題となっていた剛性の精度の改善がされています。",
                "PBDでは制約距離からのズレを修正距離としますが、その修正距離に剛性値をかけて調整します。そのため剛性が計算反復回数などにより副作用を受けます。一方で、XPBDでは剛性値を考えた運動方程式を解くことで修正距離を得るため、運動方程式に沿った剛性を得ることができます。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_xpbd.png",
                "link": {
                    "title": "[Unity] 論文を読んで紐物理を実装してみよう(XPBD: Extended Position Based Dynamics)",
                    "url": "https://zenn.dev/nrdev/articles/68ff50a19d91b9"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] 論文を読んで紐物理を実装してみよう(XPBD: Extended Position Based Dynamics)",
                    "url": "https://zenn.dev/nrdev/articles/68ff50a19d91b9"
                }
            ]
        },
        {
            "title": "Gerstner Waves",
            "description": [
                "波の形状を表現する実装です。数式を順に読み解きながらどういう仕組みなのか解説しました。Gerstner Wavesの式は分解すると高校数学で扱う三角関数と内積のみで表現されており、波の形状という幾何的な形状を表すものなので、一つずつ追っていくことで式の意味が理解しやすいです。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_gerstner_waves.png",
                "link": {
                    "title": "[Unity] 数式を読み解きながら頂点シェーダーで波の動きを作ってみる(Gerstner Waves)",
                    "url": "https://zenn.dev/nrdev/articles/a1a350e5d7e725"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] 数式を読み解きながら頂点シェーダーで波の動きを作ってみる(Gerstner Waves)",
                    "url": "https://zenn.dev/nrdev/articles/a1a350e5d7e725"
                }
            ]
        },
        {
            "title": "デカールペイント",
            "description": [
                "任意の3Dモデルにテクスチャを累積ペイントしていく実装について解説しました。任意の3Dモデルのテクスチャに描画するには直接UV空間で描画するのではなく、3D空間からUV空間に写像してテクスチャに描き込む必要があります。そこで、その写像をする専用シェーダーを実装します。デカールペイントをする際に、その専用シェーダーを介してデカール画像を描き込み、3Dモデルのテクスチャを更新していくことで実現しています。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_decal.png",
                "link": {
                    "title": "[Unity] 鮮血を、浴びせよ...!!",
                    "url": "https://zenn.dev/nrdev/articles/1ae096ef6d9637"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] 鮮血を、浴びせよ...!!",
                    "url": "https://zenn.dev/nrdev/articles/1ae096ef6d9637"
                }
            ]
        },
        {
            "title": "オイラー陽解法",
            "description": [
                "物理シミュレーションの基礎的な手法について学びながら技術ブログにしました。物理シミュレーションは未来の値を近似して計算していきます。そこでテイラー展開による近似式を使います。テイラー展開の近似式で必要な微分の値を、運動方程式から得ることでその運動について近似計算します。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_forward_euler_method.png",
                "link": {
                    "title": "[Unity] オイラー陽解法から始める物理シミュ入門",
                    "url": "https://zenn.dev/nrdev/articles/44c5a563846e06"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] オイラー陽解法から始める物理シミュ入門",
                    "url": "https://zenn.dev/nrdev/articles/44c5a563846e06"
                }
            ]
        },
        {
            "title": "シンプレクティック法",
            "description": [
                "オイラー陽解法にほんの少し手を加えるだけで精度が改善されるシンプレクティック法について調べたことについてまとめました。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_symplectic_method.png",
                "link": {
                    "title": "[Unity] シンプレクティック法でオイラー陽解法の精度改善",
                    "url": "https://zenn.dev/nrdev/articles/f45e118d5796a4"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[Unity] シンプレクティック法でオイラー陽解法の精度改善",
                    "url": "https://zenn.dev/nrdev/articles/f45e118d5796a4"
                }
            ]
        },
        {
            "title": "[UE5] 背景透過したカメラキャプチャ画像をUIに表示する",
            "description": [
                "UE5のUI実装に関する記事です。"
            ],
            "media": {
                "type": "img",
                "src": "media/blog_memo_ue5_capture.png",
                "link": {
                    "title": "[UE5] 背景透過したカメラキャプチャ画像をUIに表示する",
                    "url": "https://zenn.dev/nrdev/articles/8643d36c80049b"
                }
            },
            "github": null,
            "zenn": [
                {
                    "title": "[UE5] 背景透過したカメラキャプチャ画像をUIに表示する",
                    "url": "https://zenn.dev/nrdev/articles/8643d36c80049b"
                }
            ]
        }
    ]
}
