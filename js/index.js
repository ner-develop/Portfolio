(()=>{"use strict";var e={715:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.GalleryHtmlConstructor=t.MediaType=void 0,function(e){e.Image="img",e.Video="video",e.Page="iframe"}(n||(t.MediaType=n={})),t.GalleryHtmlConstructor=class{constructor(){}async loadContentsFromJson(e){const t=await fetch(e);return(await t.json()).contents}constructGalleryContents(e,t){const n=document.getElementById(e);if(n)for(const e of t)this.constructGalleryContent(n,e)}constructGalleryContent(e,t){const n=this.generateCardBlockElement(t.media);e.appendChild(n);const i=this.generateDescriptionBlockElement(t);e.appendChild(i)}generateDescriptionBlockElement(e){const t=document.createElement("div");t.className="col s5";const n=document.createElement("h3");n.textContent=e.title,t.appendChild(n);for(const n of e.description){const e=document.createElement("p");e.textContent=n,t.appendChild(e)}if(e.github){const n=document.createElement("p");for(let t=0;t<e.github.length;t++){const i=e.github[t],r=document.createElement("a");r.textContent=i.title,r.setAttribute("href",i.url),n.appendChild(document.createTextNode("Github：")),n.appendChild(r),t<e.github.length-1&&n.appendChild(document.createElement("br"))}t.appendChild(n)}if(e.zenn){const n=document.createElement("p");for(let t=0;t<e.zenn.length;t++){const i=e.zenn[t],r=document.createElement("a");r.textContent=i.title,r.setAttribute("href",i.url),n.appendChild(document.createTextNode("技術ブログ：")),n.appendChild(r),t<e.zenn.length-1&&n.appendChild(document.createElement("br"))}t.appendChild(n)}return t}generateCardBlockElement(e){const t=this.generateCardBlockHtml(e),n=document.createElement("div");return n.innerHTML=t.trim(),n.firstChild}generateCardBlockHtml(e){return`\n<div class="col s7">\n    <div class="card">\n        <div class="card-image">\n            ${this.generateMediaHtml(e)}\n        </div>\n    </div>\n</div>\n`}generateMediaHtml(e){switch(e.type){case n.Image:return e.link?this.generateLinkImageHtml(e.src,e.link):this.generateImageHtml(e.src);case n.Video:return this.generateVideoHtml(e.src);case n.Page:return this.generatePageHtml(e.src)}}generateVideoHtml(e){return`\n<video class="materialboxed" src="${e}" autoplay muted loop></video>\n`}generateImageHtml(e){return`\n<img class="materialboxed" src="${e}"></img>\n`}generateLinkImageHtml(e,t){return`\n<a class="tooltipped" data-position="top", data-tooltip="${t.title}" href="${t.url}">\n    <img src="${e}"></img>\n</a>\n`}generatePageHtml(e){return'\n<iframe id="iframe-self-page" frameborder="no"></iframe>\n'}}},180:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(715),o=i(n(998)),a=i(n(464));function l(e){return new Promise((t=>setTimeout(t,e)))}function s(e,t){if(!e)return null;const n=document.createElement("span");return n.textContent="_",e.appendChild(n),setInterval((function(){n.style.visibility="hidden"===n.style.visibility?"visible":"hidden"}),t),n}document.addEventListener("DOMContentLoaded",(async function(){const e=document.getElementById("title");await async function(){const e=new r.GalleryHtmlConstructor,t=o.default;e.constructGalleryContents("coding-gallery",t.contents);const n=a.default;e.constructGalleryContents("blog-gallery",n.contents)}(),function(){const e=document.getElementById("iframe-self-page"),t=window.innerWidth,n=e?.parentElement,i=n?.clientWidth||0,r=n?.clientHeight||0,o=i/t;e&&(e.style.width=`${i}px`,e.style.height=`${r}px`,e.src=`index.html?iframe=true&zoom=${o}`);const a=new URL(document.location.href).searchParams;if("true"===a.get("iframe")&&e){const t=parseFloat(a.get("zoom")||"1");document.body.style.zoom=`${t}`,e.src=""}}(),function(){const e=document.querySelector("body"),t=e?.className||"",n=window.innerHeight;function i(){const i=window.scrollY;e.className=i<n?`${t} color-section1`:`${t} color-section2`}i(),window.addEventListener("scroll",i)}(),function(){const e=document.querySelectorAll(".materialboxed");M.Materialbox.init(e,{});const t=document.querySelectorAll(".carousel");M.Carousel.init(t,{indicators:!0,fullWidth:!0});const n=document.querySelectorAll(".tooltipped");M.Tooltip.init(n,{})}(),await async function(e,t,n){const i=s(e,500);i&&(await l(2e3),i.remove())}(e),await async function(e,t){if(e)for(let n=0;n<9;n++)e.innerHTML+=t.charAt(n),await l(100)}(e,"Portfolio"),s(e,500)}))},464:e=>{e.exports=JSON.parse('{"contents":[{"title":"Gerstner Waves","description":["波の形状を表現する実装です。数式を順に読み解きながらどういう仕組みなのか解説しました。Gerstner Wavesの式は分解すると高校数学で扱う三角関数と内積のみで表現されており、波の形状という幾何的な形状を表すものなので、一つずつ追っていくことで式の意味が理解しやすいです。"],"media":{"type":"img","src":"media/blog_gerstner_waves.png","link":{"title":"[Unity] 数式を読み解きながら頂点シェーダーで波の動きを作ってみる(Gerstner Waves)","url":"https://zenn.dev/nrdev/articles/a1a350e5d7e725"}},"github":null,"zenn":[{"title":"[Unity] 数式を読み解きながら頂点シェーダーで波の動きを作ってみる(Gerstner Waves)","url":"https://zenn.dev/nrdev/articles/a1a350e5d7e725"}]},{"title":"デカールペイント","description":["任意の3Dモデルにテクスチャを累積ペイントしていく実装について解説しました。任意の3Dモデルのテクスチャに描画するには直接UV空間で描画するのではなく、3D空間からUV空間に写像してテクスチャに描き込む必要があります。そこで、その写像をする専用シェーダーを実装します。デカールペイントをする際に、その専用シェーダーを介してデカール画像を描き込み、3Dモデルのテクスチャを更新していくことで実現しています。"],"media":{"type":"img","src":"media/blog_decal.png","link":{"title":"[Unity] 鮮血を、浴びせよ...!!","url":"https://zenn.dev/nrdev/articles/1ae096ef6d9637"}},"github":null,"zenn":[{"title":"[Unity] 鮮血を、浴びせよ...!!","url":"https://zenn.dev/nrdev/articles/1ae096ef6d9637"}]},{"title":"オイラー陽解法","description":["物理シミュレーションの基礎的な手法について学びながら技術ブログにしました。物理シミュレーションは未来の値を近似して計算していきます。そこでテイラー展開による近似式を使います。テイラー展開の近似式で必要な微分の値を、運動方程式から得ることでその運動について近似計算します。"],"media":{"type":"img","src":"media/blog_forward_euler_method.png","link":{"title":"[Unity] オイラー陽解法から始める物理シミュ入門","url":"https://zenn.dev/nrdev/articles/44c5a563846e06"}},"github":null,"zenn":[{"title":"[Unity] オイラー陽解法から始める物理シミュ入門","url":"https://zenn.dev/nrdev/articles/44c5a563846e06"}]},{"title":"シンプレクティック法","description":["オイラー陽解法にほんの少し手を加えるだけで精度が改善されるシンプレクティック法について調べたことについてまとめました。"],"media":{"type":"img","src":"media/blog_symplectic_method.png","link":{"title":"[Unity] シンプレクティック法でオイラー陽解法の精度改善","url":"https://zenn.dev/nrdev/articles/f45e118d5796a4"}},"github":null,"zenn":[{"title":"[Unity] シンプレクティック法でオイラー陽解法の精度改善","url":"https://zenn.dev/nrdev/articles/f45e118d5796a4"}]}]}')},998:e=>{e.exports=JSON.parse('{"contents":[{"title":"紐物理の実装","description":["論文をもとにPBD/XPBD(PositionBasedDynamics)の実装をしました。PBDではどういう課題があり、それをXPBDではどう解決したのか、順に追って学べたのも面白かったです。アルゴリズムをただコーディングするだけでなく、論文を通して物理シミュレーションや数理最適などのテクニックなどに触れ、学びが多くありました。また、PBDは多く使われている技術のため、どのような実装がされているのか知ることができ興味深く、楽しく実装できました。"],"media":{"type":"video","src":"media/XPBD.mp4"},"github":[{"title":"PositionBasedDynamics","url":"https://github.com/ner-develop/PositionBasedDynamics"},{"title":"PositionBasedDynamicsForUE","url":"https://github.com/ner-develop/PositionBasedDynamicsForUE"},{"title":"PositionBasedDynamicsForGodot","url":"https://github.com/ner-develop/PositionBasedDynamicsForGodot"}],"zenn":[{"title":"[Unity] 論文を読んで紐物理を実装してみよう(PBD: Position Based Dynamics)","url":"https://zenn.dev/nrdev/articles/141dbc5774f666"},{"title":"[Unity] 論文を読んで紐物理を実装してみよう(XPBD: Extended Position Based Dynamics)","url":"https://zenn.dev/nrdev/articles/68ff50a19d91b9"}]},{"title":"Gerstner Wavesの実装","description":["GPU Gemsを参考にUnity上で実装しました。通常のSin波に、距離に応じてCos値のずれを加えることで密度差を生み出す手法は、シンプルながら波の勾配を表現することができとても面白いと感じました。"],"media":{"type":"video","src":"media/gerstner_waves.mp4"},"github":[{"title":"GerstnerWaves","url":"https://github.com/ner-develop/GerstnerWaves"}],"zenn":[{"title":"[Unity] 数式を読み解きながら頂点シェーダーで波の動きを作ってみる(Gerstner Waves)","url":"https://zenn.dev/nrdev/articles/a1a350e5d7e725"}]},{"title":"デカールペイント","description":["スプラトゥーンのようなペイント表現、攻撃したあとの返り血の表現など、オブジェクトの任意の場所にテクスチャを累積描画する実装をしてみました。"],"media":{"type":"video","src":"media/decal_painter.mp4"},"github":[{"title":"DecalPainter","url":"https://github.com/ner-develop/DecalPainter"}],"zenn":[{"title":"[Unity] 鮮血を、浴びせよ...!!","url":"https://zenn.dev/nrdev/articles/1ae096ef6d9637"}]},{"title":"Active Ragdollの実装","description":["キャラクターをアニメーションで動かしつつ、物理影響を受けるラグドール化をする実装をしました。Fall GuysやHuman Fall Flatのようなキャラクターの動きを試してみたく実装しました。実装には誤差をフィードバックとして制御するPID制御を用いています。"],"media":{"type":"video","src":"media/active-ragdoll.mp4"},"github":[],"zenn":[]},{"title":"レイマーチングを使ったメタボール表現","description":["ピクセルごとに符号あり距離関数に応じてレイを進め、物体への当たり判定を取ります。その際に物体間を補完し、メタボール表現を行っています。レンダリング時に透過と屈折表現などを加え、ライブ演出として実装してみました。","なお、ライブはユニティちゃんライブステージ(© UTJ/UCL)を利用させていただき、そこへ変更・演出追加をしています。"],"media":{"type":"video","src":"media/metaball_live.mp4"},"github":[],"zenn":[]},{"title":"モバイル動作のためのメタボール表現の負荷軽減","description":["レイマーチングを使ったメタボール表現の実装では、ピクセルごとにレイを進める処理が走ります。そのため、画面のピクセルが多いほど処理負荷が大きくなります。低スペックAndroid端末で動作させたところ数秒に1フレーム更新できるかどうかでした。そこでレイマーチングだけ専用パスを用意し、低解像度で描画し、最後に合成することで低スペック端末でも動作するようにしました。"],"media":{"type":"video","src":"media/metaball.mp4"},"github":[],"zenn":[]},{"title":"水面の波紋シミュレーション","description":["波動方程式を使ったシミュレーションを実装しました。オイラー陽解法を学んだ後に学びましたが、これも加速度などの微分を式に持つ方程式を使ってテイラー級数による近似によって計算するという物理シミュレーションとしての根本は同じというのが面白かったです。今後の課題としては、キャラクターが浅い水場を歩いた際のエフェクトとして、実際にゲームで使えるような実装まで落とし込みたいと思います。"],"media":{"type":"video","src":"media/wave_equation.mp4"},"github":[],"zenn":[]},{"title":"ドロネー三角形分割","description":["「ラクガキ王国」で使われている、描いた線から3Dモデルを生成する手法の論文がきっかけで知ったドロネー三角形分割というアルゴリズムを実装してみました。本実装は水面の波紋シミュレーションの水面メッシュ生成にも使用しています。"],"media":{"type":"img","src":"media/delaunay_triangulation_20240108000025.png"},"github":[],"zenn":[]},{"title":"ポートフォリオサイト","description":["Github Pagesを使って、HTML/CSS/Javascriptで作成しています。"],"media":{"type":"iframe","src":""},"github":[{"title":"Portfolio","url":"https://github.com/ner-develop/Portfolio"}]}]}')}},t={};!function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}(180)})();